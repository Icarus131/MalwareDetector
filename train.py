```py
import pickle
import numpy as np
import pandas as pd
import pandas


from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split

from sklearn.ensemble import RandomForestClassifier

import pefile



def get_df(filename):
    pe = pefile.PE(filename)
    attrs = ['AddressOfEntryPoint', 'BaseOfCode', 'CheckSum', 'DllCharacteristics', 'FileAlignment', 'ImageBase', 'LoaderFlags', 'Magic', 'MajorImageVersion', 'MajorLinkerVersion', 'MajorOperatingSystemVersion', 'MajorSubsystemVersion', 'MinorImageVersion', 'MinorLinkerVersion', 'MinorOperatingSystemVersion', 'MinorSubsystemVersion', 'NumberOfRvaAndSizes', 'SectionAlignment', 'SizeOfCode', 'SizeOfHeaders', 'SizeOfHeapCommit', 'SizeOfHeapReserve', 'SizeOfImage', 'SizeOfInitializedData', 'SizeOfStackCommit', 'SizeOfStackReserve', 'SizeOfUninitializedData', 'Subsystem']
    dic = {}
    print(getattr(pe.OPTIONAL_HEADER, attrs[0]))
    for attr in attrs:
        dic[attr] = [getattr(pe.OPTIONAL_HEADER, attr)]

    return pandas.DataFrame(dic)


train_og = pd.read_csv('dataset_malwares.csv', sep=',')
test = pd.read_csv('dataset_test.csv', sep=',')

train = train_og[['Name', 'Malware', 'AddressOfEntryPoint', 'BaseOfCode', 'CheckSum', 'DllCharacteristics', 'FileAlignment', 'ImageBase', 'LoaderFlags', 'Magic', 'MajorImageVersion', 'MajorLinkerVersion', 'MajorOperatingSystemVersion', 'MajorSubsystemVersion', 'MinorImageVersion', 'MinorLinkerVersion', 'MinorOperatingSystemVersion', 'MinorSubsystemVersion', 'NumberOfRvaAndSizes', 'SectionAlignment', 'SizeOfCode', 'SizeOfHeaders', 'SizeOfHeapCommit', 'SizeOfHeapReserve', 'SizeOfImage', 'SizeOfInitializedData', 'SizeOfStackCommit', 'SizeOfStackReserve', 'SizeOfUninitializedData', 'Subsystem']]
X = train.drop(['Name', 'Malware'], axis = 1)
y = train_og['Malware']

X_train, X_test, y_train, y_test= train_test_split(X,y, test_size=0.2, random_state=101)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_train)

with open("scaler.pickle", "wb") as fp:
    pickle.dump(scaler, fp)

X_new = pd.DataFrame(X_scaled, columns = X.columns)

skpca = PCA(n_components = 28)
X_pca = skpca.fit_transform(X_new)

with open('skpca.pickle', 'wb') as fp:
    pickle.dump(skpca, fp)

model = RandomForestClassifier(n_estimators = 100, random_state = 0, oob_score = True, max_depth = 16, max_features = 'sqrt')
model.fit(X_pca, y_train)

with open('model.pickle', 'wb') as fp:
    pickle.dump(model, fp)

def predict(target):
    target_scaled = scaler.transform(target)
    target_new = pd.DataFrame(target_scaled, columns=X.columns)
    target_pca = skpca.transform(target_new)
    y_pred = model.predict(target_pca)
    print(y_pred)

predict(X_test)


# X_test_scaled = scaler.transform(X_test)
# X_new_test = pd.DataFrame(X_test_scaled, columns = X.columns)
# X_test_pca = skpca.transform(X_new_test)

# y_pred = model.predict(X_test_pca)
# print(y_pred)
```