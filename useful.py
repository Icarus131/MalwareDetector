import pickle
import pefile
import pandas as pd
import pandas
import sys

with open('scaler.pickle', 'rb') as fp:
    scaler = pickle.load(fp)

with open('skpca.pickle', 'rb') as fp:
    skpca = pickle.load(fp)

with open('model.pickle', 'rb') as fp:
    model = pickle.load(fp)

def predict(target):
    target_scaled = scaler.transform(target)
    target_new = pd.DataFrame(target_scaled, columns=['AddressOfEntryPoint', 'BaseOfCode', 'CheckSum', 'DllCharacteristics', 'FileAlignment', 'ImageBase', 'LoaderFlags', 'Magic', 'MajorImageVersion', 'MajorLinkerVersion', 'MajorOperatingSystemVersion', 'MajorSubsystemVersion', 'MinorImageVersion', 'MinorLinkerVersion', 'MinorOperatingSystemVersion', 'MinorSubsystemVersion', 'NumberOfRvaAndSizes', 'SectionAlignment', 'SizeOfCode', 'SizeOfHeaders', 'SizeOfHeapCommit', 'SizeOfHeapReserve', 'SizeOfImage', 'SizeOfInitializedData', 'SizeOfStackCommit', 'SizeOfStackReserve', 'SizeOfUninitializedData', 'Subsystem'])
    target_pca = skpca.transform(target_new)
    y_pred = model.predict(target_pca)
    return (y_pred)

def get_df(filename):
    pe = pefile.PE(filename)
    attrs = ['AddressOfEntryPoint', 'BaseOfCode', 'CheckSum', 'DllCharacteristics', 'FileAlignment', 'ImageBase', 'LoaderFlags', 'Magic', 'MajorImageVersion', 'MajorLinkerVersion', 'MajorOperatingSystemVersion', 'MajorSubsystemVersion', 'MinorImageVersion', 'MinorLinkerVersion', 'MinorOperatingSystemVersion', 'MinorSubsystemVersion', 'NumberOfRvaAndSizes', 'SectionAlignment', 'SizeOfCode', 'SizeOfHeaders', 'SizeOfHeapCommit', 'SizeOfHeapReserve', 'SizeOfImage', 'SizeOfInitializedData', 'SizeOfStackCommit', 'SizeOfStackReserve', 'SizeOfUninitializedData', 'Subsystem']
    dic = {}
    for attr in attrs:
        dic[attr] = [getattr(pe.OPTIONAL_HEADER, attr)]

    return pandas.DataFrame(dic)

