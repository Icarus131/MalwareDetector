#include<iostream>
#include<queue>
using namespace std;

class Node
{
    public:
    Node(int val)
    {
        this->val = val;
        left = NULL;
        right = NULL;
    }

    Node* left;
    Node* right;
    int val; // Can use templates if needed
};

class BST{
    // left min, right max, equal right
    Node* root;
    public:

    BST()
    {
        root = NULL;
    }

    BST(Node* n)
    {
        root = n;
    }


    void traverse()
    {
        Node* curr = root;
        queue q; // made a file already for this implementation as well queue.cpp
        
        
    }


    void insert(int val)
    {
        // This function is used for inserting a value to the tree
        if(root == NULL)
        {
            root = new Node(val);
            return;
        }
        Node* curr = root;
        while(true){
            if(val >= curr->val){
                if(curr->right == NULL){
                    curr->right = new Node(val);
                    break;
                }
                else{
                    curr = curr->right;
                }
            }
            else{
                if(curr->left == NULL){
                    curr->left = new Node(val);
                    break;
                }
                else{
                    curr = curr->left;
                }
            }
        }
        
    }

};

int main()
{
    BST b;
    b.insert(1);
    b.insert(2);
    return 0;
}